name: CI 

on:
  workflow_dispatch:
    inputs:
      loglevel:
        description: 'Log level'
        required: true
        default: 'info'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]


jobs:
  build:

    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - name: Install apt-get packages
        run: | 
          echo RESET grub-efi/install_devices | sudo debconf-communicate grub-pc
          sudo ACCEPT_EULA=Y apt-get update
          sudo ACCEPT_EULA=Y apt-get upgrade
          sudo apt-get install wget git curl software-properties-common build-essential

      - name: Install Rust target for wasm
        run: | 
          rustup target add wasm32-wasip1

      - name: Install WasmEdge
        run: |
          VERSION=0.13.0
          curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | sudo bash -s -- --version=$VERSION -p /usr/local

      - name: install Mariadb 
        run: | 
          sudo apt-get update
          sudo apt-get -y install mysql.server libmysqlclient-dev
          sudo service mysql start 
          mysql -e "SET GLOBAL max_allowed_packet = 36700160;" -uroot -proot
          mysql -e "SET @@GLOBAL.ENFORCE_GTID_CONSISTENCY = WARN;" -uroot -proot
          mysql -e "SET @@GLOBAL.ENFORCE_GTID_CONSISTENCY = ON;" -uroot -proot
          mysql -e "SET @@GLOBAL.GTID_MODE = OFF_PERMISSIVE;" -uroot -proot
          mysql -e "SET @@GLOBAL.GTID_MODE = ON_PERMISSIVE;" -uroot -proot
          mysql -e "SET @@GLOBAL.GTID_MODE = ON;" -uroot -proot
          mysql -e "PURGE BINARY LOGS BEFORE now();" -uroot -proot

      - name: sales_tax_rate
        run: |
          cd sales_tax_rate
          cargo build --target wasm32-wasip1 --release
          wasmedgec target/wasm32-wasip1/release/sales_tax_rate_lookup.wasm sales_tax_rate_lookup.wasm
          nohup wasmedge sales_tax_rate_lookup.wasm &
          echo $! > sales_tax_rate.pid

      - name: order_management
        run: | 
          cd order_management
          cargo build --target wasm32-wasip1 --release
          wasmedgec target/wasm32-wasip1/release/order_management.wasm order_management.wasm 
          nohup wasmedge --env "SALES_TAX_RATE_SERVICE=http://127.0.0.1:8001/find_rate" --env "DATABASE_URL=mysql://root:root@127.0.0.1:3306/mysql" order_management.wasm &
          echo $! > order_management.pid

      - name: Init the service 
        run: |
          sleep 15
          echo $'\init database and order management service' 
          resp=$(curl http://127.0.0.1:8003/init)
          IF [[ $resp= *'true'* ]]; THEN 
            echo -e "Execution Success!" 
          ELSE
            echo -e "Execution Fail!"
            exit 1
          FI

      - name: test-1 POST a order 
        run: |
          sleep 15
          echo $'\nRunning test1 post a order'
          resp=$(curl http://127.0.0.1:8003/create_order -X POST -d @order.json)
          IF [[ $resp == *'{"order_id":0,"product_id":321,"quantity":2,"subtotal":20.0,"shipping_address":"123 Main St, Anytown USA","shipping_zip":"78701","shipping_cost":5.5,"total":27.15}'* ]]; then
            echo -e "Execution Success!"
          ELSE
            echo -e "Execution Fail!"
            exit 1
          FI
 
      - name: test-2 GET a order 
        run: |
          sleep 15
          echo $'\nRunning test2 fetch orders'
          resp=$(curl http://127.0.0.1:8003/orders)
          if [[ $resp == *'{"order_id":1,"product_id":321,"quantity":2,"subtotal":20.0,"shipping_address":"123 Main St, Anytown USA","shipping_zip":"78701","shipping_cost":5.5,"total":27.15}'* ]]; then
            echo -e "Execution Success!"
          else
            echo -e "Execution Fail!"
            exit 1
          fi
          echo $'\n All test pass'
          kill -9 `cat sales_tax_rate/sales_tax_rate.pid`
          rm sales_tax_rate/sales_tax_rate.pid
          kill -9 `cat order_management/order_management.pid`
          rm order_management/order_management.pid
